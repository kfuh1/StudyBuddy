Partners/Creators/Group Members : Alona King, Kathleen Fuh, John Behnke


Permissions:

<uses-permission android:name="android.permission.INTERNET" />
	
	We chose to need Internet so we can pull from the Parse back end to connect users

<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

	We chose to need to access network state so that we can determine if the user has an INTERNET capable connection that can download the latest database from parse. if they dont, they pull from the local data store



Content Provider:

	This is were things get kind of tricky. For out app, we needed to be able to push data from a device to the web so another device can download it. This obviously requires some sort of web server to host said data. Since creating a stable/reliable one would have taken a great deal of time (our group was dealing with internships/jobs this summer) and money (hosting/data fees), we decided to use Parse for our back end. (https://www.parse.com). The Parse API allows us to easily push and pull data from its back end. 
	A content provider is used called “session provider”. What it does is store a Parse Object ID and a ID in a data base. Only the objects that the user using the phone get stored into that db. When the user then loads the detail view of one of the sessions and they are the one that made it, it turns the text purple. 

	StuddyBuddy talks to Parse with the Parse API

What Loaders/Adapters are used?

	Since Parse uses its own DataBase for the local end, we do not directly implement a loader. I’ve been told by my partner Kathleen Fuh that Parse is now being accepted as a Content Provider/Loader. She was able to fully submit. 

	We use a custom adapter called "StudySessionAdapter" which extends "ArrayAdapter" to allow us to use our custom object called "StudySessoins" in an array adapter. 

User/App State

	When an activity is displayed, the same activity appears on rotation 
	User text input / selections are preserved on rotation.
	When the app is resumed after the device wakes from sleep (locked) state, the app returns the user to the exact state in which it was last used.
	When the app is relaunched from Home or All Apps, the app restores the app state as closely as possible to the previous state. 